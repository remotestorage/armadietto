#!/usr/bin/env node

const http = require('http');
const fs = require("fs");
const path = require("path");
const {ArgumentParser} = require("argparse");
const {configureLogger, getLogger} = require("../lib/logger");
const S3Handler = require("../lib/routes/S3Handler");
const process = require("process");
const https = require("https");
const { networkInterfaces } = require('os');
const dns = require("dns");

const SSL_CIPHERS = 'ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM';
const SSL_OPTIONS = require('crypto').constants.SSL_OP_CIPHER_SERVER_PREFERENCE;

/** Command-line arguments and configuration loading */

const args = parseArgs();
let conf = {};

if (args.exampleConf) {
  console.info(fs.readFileSync(path.join(__dirname, '/conf.example.json'), 'utf8'));
  return -1;
}

try {
  conf = JSON.parse(fs.readFileSync(args.conf, 'utf8'));
} catch (err) {
  console.error(`Unable to load config file “${args.conf}”:`, err);
  return -2;
}

/** Configures application */

configureLogger(conf.logging);

conf.basePath ||= '';
if (conf.basePath && !conf.basePath.startsWith('/')) { conf.basePath = '/' + conf.basePath; }
process.env.basePath = conf.basePath;

const appFactory = require('../lib/appFactory');   // process.env.basePath must have been set previously

const userNameSuffix = conf.user_name_suffix || '-Armadietto';

if (conf.http?.port) {
  start(Object.assign({}, conf.http, process.env.PORT && {port: process.env.PORT}), userNameSuffix);
}

if (conf.https?.port) {
  start(conf.https, userNameSuffix);
}


function start(network, userNameSuffix) {
  // If the environment variables aren't set, s3handler uses a shared public account on play.min.io,
  // to which anyone in the world can read and write!
  // It is not entirely compatible with S3Handler.
  const s3handler = new S3Handler(process.env.S3_ENDPOINT,
    process.env.S3_ACCESS_KEY, process.env.S3_SECRET_KEY, undefined,
    userNameSuffix);

  const app = appFactory(s3handler, s3handler);

  const port = normalizePort( network?.port || '8000');
  app.set('port', port);

  app.set('forceSSL', Boolean(conf.https?.force));
  if (network?.port && conf.https?.port) {
    app.set('httpsPort', parseInt(conf.https?.port));   // only for redirecting to HTTPS
  }


  app.locals.title = "Modular Armadietto";
  app.locals.basePath = conf.basePath;
  // rendering should set `locals.host` to `getHost(req)`
  app.locals.host = (network?.host || '0.0.0.0') + (port ? ':' + port : '');
  app.locals.signup = conf.allow_signup;

  /** Creates HTTP server. */

  let server;
  if (network.key && network.cert) {
    const key = fs.readFileSync(network.key);
    const cert = fs.readFileSync(network.cert);
    const ca = network.ca ? fs.readFileSync(network.ca) : null;
    const sslOptions = {
      key,
      cert,
      ciphers: SSL_CIPHERS,
      secureOptions: SSL_OPTIONS,
      ca
    };

    server = https.createServer(sslOptions, app);
  } else {
    server = http.createServer(app);
  }

  /** Listens on provided port, on network interfaces specified by 'host'. */

  server.listen(port);
  server.on('error', onError);
  server.on('clientError', clientError);
  server.on('listening', onListening);

  /** Event listener for HTTP server "error" event. */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        getLogger().crit(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        getLogger().crit(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /** Event listener for HTTP server "listening" event. */
  function onListening() {
    getLogger().notice(`Accepting remoteStorage connections: http${network.key ? 's' : ''}://${app.locals.host}/${app.locals.basePath}`);
  }

  /** Adds listeners for shutdown and serious problems */

// These are the happy paths for shutdown.
  process.on('SIGINT', stop.bind(this, 'SIGINT'));
  process.on('SIGTERM', stop.bind(this, 'SIGTERM'));

  function stop(signal) {
    getLogger().debug(`${signal} signal received: closing HTTP server`);
    server.close(() => {
      getLogger().notice(`No longer accepting remoteStorage connections: http${network.key ? 's' : ''}://${app.locals.host}/${app.locals.basePath}`);
    });
  }

// Without these listeners, these events would not be logged, only sent to stdout or stderr.
  process.on('uncaughtExceptionMonitor', (err, origin) => {
    getLogger().crit(`${origin} ${err}`);
  });

  process.on('warning', (warning) => {
    getLogger().warning(`${warning.name} ${warning.message} ${warning.stack}`);
  });

  process.on('multipleResolves', (type, promise, reason) => {
    getLogger().debug(`multipleResolves ${type} “${reason}”`);
  });
}

/** parses command-line arguments */
function parseArgs () {
  const version = require(path.join(__dirname, '/../package.json')).version;
  const parser = new ArgumentParser({
    add_help: true,
    description: 'NodeJS remoteStorage server / ' + version
  });

  parser.add_argument('-c', '--conf', {
    help: 'Path to configuration'
  });

  parser.add_argument('-e', '--exampleConf', {
    help: 'Print configuration example',
    action: 'store_true'
  });

  return parser.parse_args();
}

/** Normalizes a port into a number, string, or false. */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function clientError (err, socket) {
  let status, message;
  if (err.code === 'HPE_HEADER_OVERFLOW') {
    status = 431;
    message = 'Request Header Fields Too Large';
  } else {
    status = 400;
    message = 'Bad Request';
  }
  getLogger().warning(`${socket.address().address} n/a n/a ${status} ${message} ${err.toString()}`);

  if (err.code !== 'ECONNRESET' && socket.writable) {
    socket.end(`HTTP/1.1 ${status} ${message}\r\n\r\n`);
  }
  socket.destroy(err);
}
